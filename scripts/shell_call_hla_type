#!/usr/bin/env bash

# User modifiable variables

export GATK_DIR=$CONDA_PREFIX/jar
export MUTECT_DIR=$CONDA_PREFIX/jar
export STRELKA_DIR=$CONDA_PREFIX/share/strelka
export DATA_DIR=$CONDA_PREFIX/share/polysolver_data
export TMP_DIR=/tmp
export NUM_THREADS=8
#!/usr/bin/env bash


DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
#### check if an appropriate number of arguments were passed ####

if [ $# -ne 7 ]; then
        echo 1>&2 Usage: $0 bam race includeFreq build format insertCalc outDir
	echo "	-bam: path to the BAM file to be used for HLA typing"
	echo "	-race: ethnicity of the individual (Caucasian, Black, Asian or Unknown)"
	echo "	-includeFreq: flag indicating whether population-level allele frequencies should be used as priors (0 or 1)"
	echo "	-build: reference genome used in the BAM file (hg18 or hg19)"
	echo "	-format: fastq format (STDFQ, ILMFQ, ILM1.8 or SLXFQ; see Novoalign documentation)"
	echo "	-insertCalc: flag indicating whether empirical insert size distribution should be used in the model (0 or 1)"
	echo "	-outDir: output directory"
        exit 127
fi

echo "Environment variables"
echo "  -DATA_DIR: DATA_DIR data directory = $DATA_DIR"
echo "  -GATK_DIR: directory containing the GATK jar files = $GATK_DIR"
echo "  -NUM_THREADS: number of threads = $NUM_THREADS"          
                                                                   
bam=$1
race=$2
includeFreq=$3
build=$4
format=$5
insertCalc=$6
outDir=$7

ids=$DATA_DIR/ids
tag_file=$DATA_DIR/abc_v14.uniq

### LNL 20210512 DERIVE INTERMEDIATE FILES FROM HLA FASTA ###

    # generate novoalign index if necessary
    echo "  -HLA_DATA_DIR: location of HLA fasta and derived files = $HLA_DATA_DIR" # must be set externally
    echo "  -HLA_FASTA: fasta file with HLA alleles = $HLA_FASTA" # must be set externally
    HLA_NIX=`echo $HLA_FASTA | perl -n -e 'chomp; s/\.(fa|fasta)$/.nix/; print'` # exchange .fa or .fasta extension for .nix
    if [ ! -f $HLA_DATA_DIR/$HLA_NIX ]; then
        novoindex -k 11 -s 1 $HLA_DATA_DIR/$HLA_NIX $HLA_DATA_DIR/$HLA_FASTA # original index used 11-mers at 1-bp spacing
    fi

    # generate list of ids on the fly in work_dir
    mkdir $outDir ### LNL 20210702
    ids=$outDir/ids
    cat $HLA_DATA_DIR/$HLA_FASTA | grep '^>' | perl -n -e 's/^>//; print' > $ids

    # generate sam header, inserting dummy nix filename
    NOVO_SAM_HEADER="$HLA_DATA_DIR/novoalign_header.sam"
    if [ ! -f $NOVO_SAM_HEADER ]; then
        cat $HLA_DATA_DIR/$HLA_FASTA | perl -n -e 'BEGIN {$/ = ">"; $novo_idx_file = shift @ARGV; print "\@HD\tVN:1.0\tSO:coordinate\n\@PG\tID:novoalign\tPN:novoalign\tVN:V2.07.18\n"}; s/>$//; if (length($_) > 5) { @rec = split /\n/,$_; print "\@SQ\tSN:$rec[0]\tAS:$novo_idx_file\tLN:",length($rec[1]),"\n" }' $HLA_NIX > $NOVO_SAM_HEADER
    fi
    if [ ! -f $NOVO_SAM_HEADER ]; then
        echo "failed to generate $NOVO_SAM_HEADER"
        exit 1 # ok for a script running in a sub-shell
    fi

    # generate tag_file on the fly if necessary
    # consists of each 38-bp string in each HLA allele at 1 bp offsets and its rev-comp, de-dupd
    HLA_UNIQ_SEQ_FILE=`echo $HLA_FASTA | perl -n -e 'chomp; s/\.(fa|fasta)$/.uniq/; print'` # exchange .fa or .fasta extension for .uniq
    if [ ! -f $HLA_DATA_DIR/$HLA_UNIQ_SEQ_FILE ]; then
        cat $HLA_DATA_DIR/$HLA_FASTA  | grep -v '^>' | perl -n -e 'BEGIN {%uniq; %rc = (A => "T", C => "G", G => "C", T => "A", N => "N")}; chomp; for (my $i = 0; $i <= length($_) - 38; $i+=1) { $seq = substr($_, $i, 38); $uniq{$seq} = 1; $revcomp = ""; for (my $j = 37; $j >= 0; $j--) { $revcomp .= $rc{substr($seq,$j,1) } }; $uniq{$revcomp} = 1; }; END { @result = keys(%uniq); print "",join("\n",@result),"\n"}' > $HLA_DATA_DIR/$HLA_UNIQ_SEQ_FILE
    fi
    tag_file=$HLA_DATA_DIR/$HLA_UNIQ_SEQ_FILE

### END DERIVE INTERMEDIATE FILES ###


mkdir $outDir

var=`cat $ids`

# calculate insert size distribution


if [ $insertCalc == 1 ]; then

	echo -n -e "calculating insert size distribution\n"

	java -Xmx12g -Xms5g -jar $GATK_DIR/CollectInsertSizeMetrics.jar I=$bam O=$outDir/insertsize.txt H=$outDir/insertsize.hist.pdf VALIDATION_STRINGENCY=SILENT TMP_DIR=$outDir


else
	echo -n -e "skipping insert size distribution\n"

	iFile=0

fi

# getting matching tag sequences

echo -n -e "getting matching tags\n"

samtools view -H $bam > $outDir/tag.sam

### LNL 20210920 reads found in this step are only from HLA region.
###  to improve performance, accept reads from chr6, from 3MB upstream of HLA-A to 3MB downstream of HLA-B, encompassing all HLA genes, and filter these with tag_file

if [ $build == "hg18" ] || [ $build == "GRCh36" ] || [ $build == "grch36" ]; then
    hla_region="6:27016016-34433943"
elif [ $build == "hg19" ] || [ $build == "GRCh37" ] || [ $build == "grch37" ]; then
    hla_region="6:26909037-34324964"
elif [ $build == "hg38" ] || [ $build == "GRCh38" ] || [ $build == "grch38" ]; then
    hla_region="6:26941260-34357179"
fi
samtools view $bam $hlaregion | grep -F -f $tag_file >> $outDir/tag.sam
samtools view $bam chr$hlaregion | grep -F -f $tag_file >> $outDir/tag.sam

### END performance improvement ###

#samtools view $bam | grep -F -f $tag_file >> $outDir/tag.sam # old way, filter all reads, slow; observed qualifying reads come only from chr6:~30MB

samtools view -bS -o $outDir/tag.bam $outDir/tag.sam

java -jar $GATK_DIR/SamToFastq.jar I=$outDir/tag.bam F=$outDir/tag.1.fastq F2=$outDir/tag.2.fastq VALIDATION_STRINGENCY=SILENT

$DIR/../scripts/clean_unpaired_fastq.pl $outDir/tag.1.fastq

$DIR/../scripts/clean_unpaired_fastq.pl $outDir/tag.2.fastq

#getting chr6 region

echo -n -e "getting chr6 region\n"

samtools view -H $bam > $outDir/chr6region.sam


### LNL 20210526 BUG FIX MAKE ALL CHROMS n:n-n ###

if [ $build == "hg18" ] || [ $build == "GRCh36" ] || [ $build == "grch36" ]; then

        echo -n -e "build=hg18\n"

        samtools view $bam 6:30016016-30022640 >> $outDir/chr6region.sam

        samtools view $bam 6:31428628-31433943 >> $outDir/chr6region.sam

        samtools view $bam 6:31343505-31348848 >> $outDir/chr6region.sam

        samtools view $bam chr6:30016016-30022640 >> $outDir/chr6region.sam

        samtools view $bam chr6:31428628-31433943 >> $outDir/chr6region.sam

        samtools view $bam chr6:31343505-31348848 >> $outDir/chr6region.sam

elif [ $build == "hg19" ] || [ $build == "GRCh37" ] || [ $build == "grch37" ]; then

        echo -n -e "build=hg19\n"

        samtools view $bam 6:29909037-29913661 >> $outDir/chr6region.sam

        samtools view $bam 6:31321649-31324964 >> $outDir/chr6region.sam

        samtools view $bam 6:31236526-31239869 >> $outDir/chr6region.sam

        samtools view $bam chr6:29909037-29913661 >> $outDir/chr6region.sam

        samtools view $bam chr6:31321649-31324964 >> $outDir/chr6region.sam

        samtools view $bam chr6:31236526-31239869 >> $outDir/chr6region.sam

elif [ $build == "hg38" ] || [ $build == "GRCh38" ] || [ $build == "grch38" ]; then

        echo -n -e "build=hg38\n"

        samtools view $bam 6:29941260-29945884 >> $outDir/chr6region.sam

        samtools view $bam 6:31353872-31357188 >> $outDir/chr6region.sam

        samtools view $bam 6:31268749-31272130 >> $outDir/chr6region.sam

        samtools view $bam chr6:29941260-29945884 >> $outDir/chr6region.sam

        samtools view $bam chr6:31353872-31357188 >> $outDir/chr6region.sam

        samtools view $bam chr6:31268749-31272130 >> $outDir/chr6region.sam

fi

### END BUG FIX MAKE ALL CHROMS n:n-n ###

samtools view -bS -o $outDir/chr6region.bam $outDir/chr6region.sam

java -jar $GATK_DIR/SamToFastq.jar I=$outDir/chr6region.bam F=$outDir/chr6region.1.fastq F2=$outDir/chr6region.2.fastq VALIDATION_STRINGENCY=SILENT

$DIR/../scripts/clean_unpaired_fastq.pl $outDir/chr6region.1.fastq

$DIR/../scripts/clean_unpaired_fastq.pl $outDir/chr6region.2.fastq

# merge the two sets of fastqs

echo -n -e "merge the two sets of fastqs\n"

$DIR/../scripts/merge_fastq.pl $outDir/tag $outDir/chr6region $outDir/merged

rm -f $outDir/*sam

# alignment

echo -n -e "aligning to HLA library\n"

# cat $DATA_DIR/novoalign_complete_header.sam > $outDir/nv.complete.chr6region.R0k6.sam
cat $NOVO_SAM_HEADER > $outDir/nv.complete.chr6region.R0k6.sam ### LNL 20210512 ###

# $DIR/../scripts/align_fork_fh.pl $outDir/merged.1.fastq $outDir/merged.2.fastq $NUM_THREADS $format $DATA_DIR/abc_complete.nix $outDir/nv.complete.chr6region.R0k6.sam 0
$DIR/../scripts/align_fork_fh.pl $outDir/merged.1.fastq $outDir/merged.2.fastq $NUM_THREADS $format $HLA_DATA_DIR/$HLA_NIX $outDir/nv.complete.chr6region.R0k6.sam 0 ### LNL 20210512 ###

samtools view -bS -o $outDir/nv.complete.chr6region.R0k6.bam $outDir/nv.complete.chr6region.R0k6.sam

rm -f $outDir/nv.complete.chr6region.R0k6.sam

echo -n -e "sorting\n"

java -jar $GATK_DIR/SortSam.jar I=$outDir/nv.complete.chr6region.R0k6.bam O=$outDir/nv.complete.chr6region.R0k6.csorted.bam SORT_ORDER=coordinate TMP_DIR=$TMP_DIR

t=`ls -lh $outDir/nv.complete.chr6region.R0k6.csorted.bam`
echo -n -e "size of bam = $t\n"

rm -f $outDir/nv.complete.chr6region.R0k6.bam

samtools index $outDir/nv.complete.chr6region.R0k6.csorted.bam

# first allele calculations

echo -n -e "calculating lik1\n"
date

$DIR/../scripts/first_allele_calculations_fork.pl $ids $DIR/.. samtools $NUM_THREADS $race $iFile $outDir

date

echo -n -e "get first winners\n"
date

rm $outDir/counts1.R0k6

for i in $var; do
        a=`tail -1 $outDir/$i.lik1 | cut -f2`
        echo -n -e "$i\t$a\n" >> $outDir/counts1.R0k6
done

winner1_a=`sort -k2,2rn $outDir/counts1.R0k6 | grep hla_a | head -1 | cut -f1`
winner1_b=`sort -k2,2rn $outDir/counts1.R0k6 | grep hla_b | head -1 | cut -f1`
winner1_c=`sort -k2,2rn $outDir/counts1.R0k6 | grep hla_c | head -1 | cut -f1`

date


# second allele calculations

echo -n -e "calculating lik2\n"

$DIR/../scripts/second_allele_calculations.pl $race $outDir/counts1.R0k6 $ids 1 $DIR/.. $outDir

date

echo -n -e "get second winners\n"

rm $outDir/counts2.R0k6

for i in $var; do
        a=`tail -1 $outDir/$i.lik2 | cut -f2`
        echo -n -e "$i\t$a\n" >> $outDir/counts2.R0k6
done

winner2_a=`sort -k2,2rn $outDir/counts2.R0k6 | grep hla_a | head -1 | cut -f1`
winner2_b=`sort -k2,2rn $outDir/counts2.R0k6 | grep hla_b | head -1 | cut -f1`
winner2_c=`sort -k2,2rn $outDir/counts2.R0k6 | grep hla_c | head -1 | cut -f1`

echo -n -e "winners1\t$winner1_a\t$winner1_b\t$winner1_c\n"
echo -n -e "winners2\t$winner2_a\t$winner2_b\t$winner2_c\n"


if [ $includeFreq == 1 ]; then

	echo -n -e "HLA-A\t$winner1_a\t$winner2_a\nHLA-B\t$winner1_b\t$winner2_b\nHLA-C\t$winner1_c\t$winner2_c\n" > $outDir/winners.hla.txt

else

	echo -n -e "HLA-A\t$winner1_a\t$winner2_a\nHLA-B\t$winner1_b\t$winner2_b\nHLA-C\t$winner1_c\t$winner2_c\n" > $outDir/winners.hla.nofreq.txt
fi


# cleanup

echo -n -e "cleanup\n"


rm -f $outDir/temp* &
rm -f $outDir/*sam &
#rm -f  $outDir/tag*fastq0* $outDir/ids_* &
#rm -rf $outDir/*REF* &
rm -rf $outDir/nv* &
rm -rf $outDir/*fastq &
rm -rf $outDir/tag* &
rm -rf $outDir/chr6region* &
rm -rf $outDir/merged* &
rm -rf $outDir/counts* &
rm -f $outDir/*lik1 $outDir/*lik2 &

